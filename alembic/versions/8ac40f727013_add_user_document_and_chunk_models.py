"""Add User, Document, and Chunk models

Revision ID: 8ac40f727013
Revises:
Create Date: 2025-10-10 11:36:34.616965

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8ac40f727013"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chunks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document_id",
            sa.Integer(),
            nullable=False,
            comment="Reference to documents.id ",
        ),
        sa.Column(
            "document_owner_id",
            sa.Integer(),
            nullable=False,
            comment="Denormalized owner_id for fast queries without joins",
        ),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("chunk_index", sa.Integer(), nullable=False),
        sa.Column("page_number", sa.Integer(), nullable=True),
        sa.Column("embedding", postgresql.ARRAY(sa.Float()), nullable=True),
        sa.Column("embedding_model", sa.String(length=100), nullable=True),
        sa.Column("embedding_dim", sa.Integer(), nullable=True),
        sa.Column("token_count", sa.Integer(), nullable=True),
        sa.Column("char_count", sa.Integer(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_chunk_active_created", "chunks", ["is_deleted", "created_at"], unique=False
    )
    op.create_index(
        "idx_chunk_deleted_cleanup",
        "chunks",
        ["is_deleted", "deleted_at"],
        unique=False,
    )
    op.create_index(
        "idx_chunk_doc_active_index",
        "chunks",
        ["document_id", "is_deleted", "chunk_index"],
        unique=False,
    )
    op.create_index(
        "idx_chunk_doc_page",
        "chunks",
        ["document_id", "page_number", "chunk_index"],
        unique=False,
    )
    op.create_index(
        "idx_chunk_owner_active_created",
        "chunks",
        ["document_owner_id", "is_deleted", "created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_chunks_document_id"), "chunks", ["document_id"], unique=False
    )
    op.create_index(
        op.f("ix_chunks_document_owner_id"),
        "chunks",
        ["document_owner_id"],
        unique=False,
    )
    op.create_index(op.f("ix_chunks_id"), "chunks", ["id"], unique=False)
    op.create_index(
        op.f("ix_chunks_is_deleted"), "chunks", ["is_deleted"], unique=False
    )
    op.create_table(
        "documents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("original_filename", sa.String(length=255), nullable=False),
        sa.Column("file_path", sa.String(length=500), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.Column("content_type", sa.String(length=100), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("processing_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("processing_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("error_count", sa.Integer(), nullable=True),
        sa.Column("last_error", sa.Text(), nullable=True),
        sa.Column("text_content", sa.Text(), nullable=True),
        sa.Column(
            "owner_id", sa.Integer(), nullable=False, comment="References users.id"
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("download_count", sa.Integer(), nullable=True),
        sa.Column("last_accessed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_doc_active_status_created",
        "documents",
        ["is_deleted", "status", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_doc_content_type_size",
        "documents",
        ["content_type", "file_size"],
        unique=False,
    )
    op.create_index(
        "idx_doc_deleted_cleanup",
        "documents",
        ["is_deleted", "deleted_at"],
        unique=False,
    )
    op.create_index(
        "idx_doc_owner_active_created",
        "documents",
        ["owner_id", "is_deleted", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_doc_owner_active_status",
        "documents",
        ["owner_id", "is_deleted", "status"],
        unique=False,
    )
    op.create_index(
        "idx_doc_processing_errors",
        "documents",
        ["status", "error_count"],
        unique=False,
    )
    op.create_index(
        "idx_doc_processing_time",
        "documents",
        ["processing_started_at", "processing_completed_at"],
        unique=False,
    )
    op.create_index(
        "idx_doc_usage_metrics",
        "documents",
        ["download_count", "last_accessed_at"],
        unique=False,
    )
    op.create_index(op.f("ix_documents_id"), "documents", ["id"], unique=False)
    op.create_index(
        op.f("ix_documents_owner_id"), "documents", ["owner_id"], unique=False
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_login_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("login_count", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_user_activity_tracking",
        "users",
        ["login_count", "last_login_at"],
        unique=False,
    )
    op.create_index(
        "idx_user_deleted_cleanup", "users", ["is_deleted", "deleted_at"], unique=False
    )
    op.create_index(
        "idx_user_email_active_deleted",
        "users",
        ["email", "is_active", "is_deleted"],
        unique=False,
    )
    op.create_index(
        "idx_user_username_active_deleted",
        "users",
        ["username", "is_active", "is_deleted"],
        unique=False,
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index("idx_user_username_active_deleted", table_name="users")
    op.drop_index("idx_user_email_active_deleted", table_name="users")
    op.drop_index("idx_user_deleted_cleanup", table_name="users")
    op.drop_index("idx_user_activity_tracking", table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_documents_owner_id"), table_name="documents")
    op.drop_index(op.f("ix_documents_id"), table_name="documents")
    op.drop_index("idx_doc_usage_metrics", table_name="documents")
    op.drop_index("idx_doc_processing_time", table_name="documents")
    op.drop_index("idx_doc_processing_errors", table_name="documents")
    op.drop_index("idx_doc_owner_active_status", table_name="documents")
    op.drop_index("idx_doc_owner_active_created", table_name="documents")
    op.drop_index("idx_doc_deleted_cleanup", table_name="documents")
    op.drop_index("idx_doc_content_type_size", table_name="documents")
    op.drop_index("idx_doc_active_status_created", table_name="documents")
    op.drop_table("documents")
    op.drop_index(op.f("ix_chunks_is_deleted"), table_name="chunks")
    op.drop_index(op.f("ix_chunks_id"), table_name="chunks")
    op.drop_index(op.f("ix_chunks_document_owner_id"), table_name="chunks")
    op.drop_index(op.f("ix_chunks_document_id"), table_name="chunks")
    op.drop_index("idx_chunk_owner_active_created", table_name="chunks")
    op.drop_index("idx_chunk_doc_page", table_name="chunks")
    op.drop_index("idx_chunk_doc_active_index", table_name="chunks")
    op.drop_index("idx_chunk_deleted_cleanup", table_name="chunks")
    op.drop_index("idx_chunk_active_created", table_name="chunks")
    op.drop_table("chunks")
    # ### end Alembic commands ###
